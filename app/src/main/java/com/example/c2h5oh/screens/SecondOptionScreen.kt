//2Î≤à ÌôîÎ©¥(Ïà† Ïù¥Î¶Ñ Í≤ÄÏÉâ Ïãú Ï†ïÎ≥¥ ÏïåÎ†§Ï£ºÎäî ÌôîÎ©¥)
package com.example.c2h5oh.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Button
import androidx.compose.material.ButtonDefaults
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material.OutlinedTextField
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.runtime.*
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import coil.compose.AsyncImage
//import androidx.compose.ui.text.input.TextFieldValue
import com.example.c2h5oh.Liquor
import com.example.c2h5oh.fetchLiquorByName
import kotlinx.coroutines.launch

@Composable
fun SecondOptionScreen() {
    var query by remember { mutableStateOf(TextFieldValue("")) }
    var result by remember { mutableStateOf("Í≤∞Í≥ºÍ∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§.") }
    var liquorResult by remember { mutableStateOf<Liquor?>(null) }

    val scope = rememberCoroutineScope()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
            .padding(32.dp),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Ïà† Ïù¥Î¶ÑÏúºÎ°ú Í≤ÄÏÉâÌïòÍ∏∞",
            fontSize = 35.sp,
            color = Color(0xFFC0B0FD)
        )

        Spacer(modifier = Modifier.height(150.dp))

        OutlinedTextField(
            value = query,
            onValueChange = { query = it },
            label = {
                Text(
                    text = "Ïà† Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                    fontSize = 10.sp,
                    color = Color.LightGray // Ïó¨Í∏∞ÏóêÏÑú Í∏ÄÏûêÏÉâÎßå ÏßÄÏ†ï
                )
            },
            modifier = Modifier.fillMaxWidth(),
            colors = OutlinedTextFieldDefaults.colors(
                focusedTextColor = Color.White,             // ÏûÖÎ†• Ï§ë ÌÖçÏä§Ìä∏ ÏÉâ
                unfocusedTextColor = Color.White,           // Ìè¨Ïª§Ïä§ Ìï¥Ï†ú Ïãú ÌÖçÏä§Ìä∏ ÏÉâ
                focusedBorderColor = Color(0xFFFFA6D1),     // Ìè¨Ïª§Ïä§ ÏÉÅÌÉú ÌÖåÎëêÎ¶¨
                unfocusedBorderColor = Color(0xFFF5C7DA),   // ÎπÑÌè¨Ïª§Ïä§ ÌÖåÎëêÎ¶¨
                cursorColor = Color.White,                  // Ïª§ÏÑú ÏÉâ
                focusedLabelColor = Color(0xFFC0B0FD),
                unfocusedLabelColor = Color.Gray,
                focusedContainerColor = Color.Black,     // Î∞∞Í≤ΩÏÉâ
                unfocusedContainerColor = Color.Black
            )

        )

        Spacer(modifier = Modifier.height(30.dp))

        Button(
            onClick = {
                scope.launch {
                    val name = query.text.trim()
                    val liquor = fetchLiquorByName(name)
                    if (liquor != null) {
                        liquorResult = liquor
                        result = "" // ÌÖçÏä§Ìä∏ Í≤∞Í≥ºÎäî ÎπÑÏõÄ
                    } else {
                        liquorResult = null
                        result = "Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§."
                    }
                }
            },
            colors = ButtonDefaults.buttonColors(
                backgroundColor = Color(0xFFBEAFFB),
                contentColor = Color.White
            )
        ) {
            Text("Í≤ÄÏÉâ")
        }

        Spacer(modifier = Modifier.height(30.dp))

        // üîΩ Í≤∞Í≥º ÌëúÏãú
        liquorResult?.let { liquor ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
                colors = CardDefaults.cardColors(containerColor = Color.DarkGray)
            ) {
                Row(
                    modifier = Modifier
                        .padding(12.dp)
                        .fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    AsyncImage(
                        model = liquor.image_url,
                        contentDescription = liquor.name,
                        modifier = Modifier
                            .size(64.dp)
                            .clip(RoundedCornerShape(8.dp))
                            .border(1.dp, Color.White, RoundedCornerShape(8.dp)),
                        contentScale = ContentScale.Crop
                    )

                    Spacer(modifier = Modifier.width(12.dp))

                    Column {
                        Text(
                            text = liquor.name,
                            fontSize = 18.sp,
                            color = Color.White,
                            fontWeight = FontWeight.SemiBold
                        )
                        Text(
                            text = "${liquor.alcohol_level}% alcohol",
                            fontSize = 14.sp,
                            color = Color.LightGray
                        )
                        liquor.description?.let {
                            Spacer(modifier = Modifier.height(4.dp))
                            Text(
                                text = it,
                                fontSize = 12.sp,
                                color = Color.Gray,
                                maxLines = 2
                            )
                        }
                    }
                }
            }
        } ?: Text(
            text = result,
            fontSize = 18.sp,
            color = Color(0xFFFFD8EB)
        )
    }
}
